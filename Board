
package one;
public class Board {
	
	
	// Corresponds to index [0][0]
	public static final int TOP_LEFT = 0;
	
	// Corresponds to index [0][1]
	public static final int TOP_CENTER = 1;
	
	// Corresponds to index [0][2]
	public static final int TOP_RIGHT = 2;
	
	// Corresponds to index [1][0]
	public static final int MIDDLE_LEFT = 10;
	
	// Corresponds to index [1][1]
	public static final int MIDDLE_CENTER = 11;
	
	// Corresponds to index [1][2]
	public static final int MIDDLE_RIGHT = 12;
	
	// Corresponds to index [2][0]
	public static final int BOTTOM_LEFT = 20;
	
	// Corresponds to index [2][1]
	public static final int BOTTOM_CENTER = 21;
	
	// Corresponds to index [2][2]
	public static final int BOTTOM_RIGHT = 22;
	
	/** Represents an empty cell. */
	public static final char EMPTY = ' ';
	
	/**
	 * A 2D array that stores the state of the board. The first
	 * index is for the row, the second index if for the column.
	 */
	private char[][] board;
	
	/**
	 * The constructor. This loops through all the cells in the
	 * 2D array and sets them to the EMPTY constant.
	 */
	public Board() {
		board = new char[3][3];
		for (int row = 0; row < board.length; row++) {
			for (int col = 0; col < board[row].length; col++) {
				board[row][col] = EMPTY;
			}
		}
	}
	

	public int getRowCount() {
		return board.length;
	}
	
	
	public int getColumnCount() {
		return board[0].length;
	}
	
	public boolean mark(int cell, char symbol) {
		board[getRow(cell)][getColumn(cell)] = symbol;
		return hasWon(cell, symbol);
	}
	
	private boolean hasWon(int lastPlay, char symbol) {
		
		int row = getRow(lastPlay);
		int col = getColumn(lastPlay);
		int index;
		
		if (checkRightDiagonal(lastPlay, symbol) || checkLeftDiagonal(lastPlay, symbol)) {
			return true;
		}
		
		for (index = 0; index < getColumnCount(); index++) {
			
			if (board[row][index] != symbol) break;
		}
		
		if (index == getColumnCount()) return true;
		
		
		for (index = 0; index < getRowCount(); index++) {
			if (board[index][col] != symbol) break;
		}
		if (index == getRowCount()) return true;
		
		return false;
	}
	


	public char getCellContents(int cell) {
		return board[getRow(cell)][getColumn(cell)];
	}
	
	public char getCellContents(int row, int col) {
		return board[row][col];
	}

	private int getRow(int cell) {
		return cell / 10;
	}

	private int getColumn(int cell) {
		return cell % 10;
	}
	
	private boolean checkRightDiagonal(int lastPlay, char symbol) {
		return getCellContents(TOP_LEFT) == symbol && getCellContents(TOP_LEFT) == getCellContents(MIDDLE_CENTER) &&
				getCellContents(MIDDLE_CENTER) == getCellContents(BOTTOM_RIGHT);
	}
	
	private boolean checkLeftDiagonal(int lastPlay, char symbol) {
		return getCellContents(TOP_RIGHT) == symbol && getCellContents(TOP_RIGHT) == getCellContents(MIDDLE_CENTER) &&
				getCellContents(MIDDLE_CENTER) == getCellContents(BOTTOM_LEFT);
	}
	
}
